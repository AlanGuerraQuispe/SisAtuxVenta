package com.aw.swing.mvp.navigation;

import com.aw.swing.mvp.Presenter;
import com.aw.swing.mvp.action.ActionEnableable;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

/**
 * User: gmc
 * Date: 01-mar-2008
 */
public class FlowManager implements Serializable {

    private List<Flow> flows = new ArrayList();

    private Presenter root;
    private ActionEnableable menuItem;

    private Stack<Presenter> presenters = new Stack();

    public FlowManager(Presenter root, ActionEnableable menuItem) {
        this(root);
        this.menuItem = menuItem;
    }

    public FlowManager(Presenter root) {
        this.root = root;
    }

    /**
     * Return a new flow to manage the transition generated by the action sent as parameter
     *
     * @return
     */
    public Flow getNewFlow(Class currentPst, Class endPst) {
        Flow flow = new Flow();
        flow.setInitialPst(currentPst);
        flow.setEndPst(endPst);
        flow.setGoForward(true);
        addFlow(flow);
        return flow;
    }

    /**
     * Return a flow needed in order to represent the flow generated at closing the current view
     *
     * @param currentPst
     * @return
     */
    public Flow getNewFlowToCloseView(Class currentPst) {
        Flow lastFlow = getLastFlow();
        Flow flow = new Flow();
        flow.setInitialPst(currentPst);
        flow.setEndPst(lastFlow.getInitialPst());
        flow.setGoForward(false);
        addFlow(flow);
        return flow;
    }


    public void addFlow(Flow flow) {
        flows.add(flow);
    }

    public boolean existFlows() {
        return flows.size() > 0;
    }

    public Flow getLastFlow() {
        return flows.get(flows.size() - 1);
    }


    public Flow getInitialFlowFor(Flow endFlow) {
        int indexEndFlow = flows.indexOf(endFlow);
        return flows.get(indexEndFlow - 1);
    }

    public void remove(Flow flow) {
        flows.remove(flow);
    }

//    public void cleanBadFlows(String currentView) {
//        if (!existFlows()) {
//            return;
//        }
//        int sizeFlows = flows.size();
//        for (int i = sizeFlows - 1; i >= 0; i--) {
//            Flow currentFlow = flows.get(i);
//            if (!currentView.equals(currentFlow.getEndView())) {
//                flows.remove(i);
//            } else {
//                break;
//            }
//        }
//    }


    public List<Flow> getFlows() {
        return flows;
    }

    public void removeAllFlows() {
        flows = new ArrayList();
    }

    public Presenter getRoot() {
        return root;
    }

    public Presenter getLastPstShown() {
        if (presenters.size()>0){
            return presenters.get(presenters.size()-1);
        }
        return null;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        FlowManager that = (FlowManager) o;

        if (!root.equals(that.root)) return false;

        return true;
    }

    @Override
    public int hashCode() {
        return root.hashCode();
    }

    public ActionEnableable getMenuItem() {
        return menuItem;
    }

    public void removePst(Presenter pst) {
        if (presenters.size() > 0) {
            if (pst != presenters.get(presenters.size()-1)){
                throw new IllegalStateException("ERROR: Trying to remove the presenter:"+pst+" which is not the last presenter:"+getLastPstShown()+" of the flow");
            }
            presenters.pop();
        }
    }

    public void setLastPstShown(Presenter pst) {
        presenters.push(pst);
    }

    public boolean contains(Presenter pst) {
        return presenters.contains(pst);  
    }

    public boolean existInitialFlowFor(Presenter pst) {
        Flow lastFlow =  getLastFlow();
        return lastFlow.getEndPst().getName().equals(pst.getClass().getName());  
    }

    public void closeSecondaryPresenters() {
        int pstSize = presenters.size();
        for (int i = pstSize-1; i > 0; i--) {
            Presenter lastPst = presenters.get(i);
            lastPst.closeView();
        }
    }
    public void closeSecondaryPresenters(int nroPresentersToClose) {
        int pstSize = presenters.size();
        for (int i = pstSize-1; i > 0 && nroPresentersToClose>0; i--) {
            nroPresentersToClose--;
            Presenter lastPst = presenters.get(i);
            lastPst.closeView();
        }
    }

}
